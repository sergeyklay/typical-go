package app

import (
	"io"
	"os"
)

var (
	// Stdout standard output
	Stdout io.Writer = os.Stdout
)

const typicalwTmpl = `#!/bin/bash

set -e

TYPTMP={{.TypicalTmp}}
TYPGO=$TYPTMP/bin/typical-go

if ! [ -s $TYPGO ]; then
	echo "Build typical-go"
	go build -o $TYPGO github.com/typical-go/typical-go
fi

$TYPGO run \
	-project-pkg="{{.ProjectPkg}}" \
	-typical-build="{{.TypicalBuild}}" \
	-typical-tmp=$TYPTMP \
	$@
`

const generatedDocSrc = `// Package generated contain generated code from annotate
package generated
`

const appStartSrc = `package app

import (
	"fmt"
)

// Start app
func Start() {
	fmt.Println("Start app")
	// TODO: 
}
`
const mainTmpl = `package main

// Autogenerated by Typical-Go. DO NOT EDIT.

import (
	"{{.ProjectPkg}}/internal/app"
	_ "{{.ProjectPkg}}/internal/generated/typical"
	"github.com/typical-go/typical-go/pkg/typapp"
)

func main() {
	typapp.Start(app.Start)
}
`

const typicalBuildTmpl = `package main

import (
	"github.com/typical-go/typical-go/pkg/typast"
	"github.com/typical-go/typical-go/pkg/typapp"
	"github.com/typical-go/typical-go/pkg/typgo"
)

var descriptor = typgo.Descriptor{
	ProjectName:    "{{.ProjectName}}",
	ProjectVersion: "0.0.1",
	ProjectLayouts: []string{"internal", "pkg"},

	Cmds: []typgo.Cmd{
		// annotate
		&typast.AnnotateCmd{
			Annotators: []typast.Annotator{
				&typapp.CtorAnnotation{},
				&typapp.DtorAnnotation{},
			},
		},
		// compile
		&typgo.CompileCmd{
			Action: &typgo.StdCompile{},
		},
		// run
		&typgo.RunCmd{
			Before: typgo.BuildCmdRuns{"annotate", "compile"},
			Action: &typgo.StdRun{},
		},
		// clean
		&typgo.CleanCmd{
			Action: &typgo.StdClean{},
		},
	},
}

func main() {
	typgo.Start(&descriptor)
}
`
