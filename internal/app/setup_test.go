package app_test

import (
	"errors"
	"io/ioutil"
	"os"
	"strings"
	"testing"

	"github.com/stretchr/testify/require"
	"github.com/typical-go/typical-go/internal/app"
	"github.com/typical-go/typical-go/pkg/oskit"
	"github.com/typical-go/typical-go/pkg/typgo"
)

func TestSetup(t *testing.T) {
	var output strings.Builder

	defer oskit.PatchStdout(&output)()
	defer typgo.PatchBash([]*typgo.RunExpectation{})(t)
	defer oskit.MkdirAll("some-pkg")()

	require.NoError(t, app.Setup(cliContext([]string{
		"-project-pkg=some-pkg",
	})))

	b, _ := ioutil.ReadFile("some-pkg/typicalw")
	require.Equal(t, `#!/bin/bash

set -eu

PROJECT_PKG="some-pkg"
BUILD_TOOL="tools/typical-build"
TYPTMP=.typical-tmp
TYPGO=$TYPTMP/bin/typical-go
TYPGO_SRC=github.com/typical-go/typical-go

if ! [ -s $TYPGO ]; then
	echo "Build $TYPGO_SRC to $TYPGO"
	go build -o $TYPGO $TYPGO_SRC
fi

$TYPGO run \
	-project-pkg=$PROJECT_PKG \
	-typical-build=$BUILD_TOOL \
	-typical-tmp=$TYPTMP \
	$@
`, string(b))

	require.Equal(t, "Create 'some-pkg/typicalw'\n", output.String())
}

func TestSetup_GetParamError(t *testing.T) {
	unpatch := typgo.PatchBash([]*typgo.RunExpectation{
		{CommandLine: "go list -m", ReturnError: errors.New("some-error")},
	})
	defer unpatch(t)

	os.Mkdir(".typical-tmp", 0777)
	defer os.RemoveAll(".typical-tmp")

	err := app.Setup(cliContext([]string{}))
	require.EqualError(t, err, "some-error: ")
}

func TestSetup_WithGomodFlag(t *testing.T) {
	var output strings.Builder
	defer oskit.PatchStdout(&output)()
	defer typgo.PatchBash([]*typgo.RunExpectation{
		{CommandLine: "go mod init somepkg"},
	})(t)
	defer oskit.MkdirAll("somepkg")()

	require.NoError(t, app.Setup(cliContext([]string{
		"-project-pkg=somepkg",
		"-go-mod",
	})))
	require.Equal(t, "Initiate go.mod\nCreate 'somepkg/typicalw'\n", output.String())
}

func TestSetup_WithGomodFlag_Error(t *testing.T) {
	var output strings.Builder
	defer oskit.PatchStdout(&output)()
	defer typgo.PatchBash([]*typgo.RunExpectation{
		{
			CommandLine: "go mod init somepkg",
			ErrorBytes:  []byte("error-message"),
			ReturnError: errors.New("some-error"),
		},
	})(t)
	defer oskit.MkdirAll("somepkg")()

	err := app.Setup(cliContext([]string{
		"-project-pkg=somepkg",
		"-go-mod",
	}))
	require.EqualError(t, err, "some-error: error-message")
	require.Equal(t, "Initiate go.mod\n", output.String())
}

func TestSetup_WithGomodFlag_MissingProjectPkg(t *testing.T) {
	var output strings.Builder
	defer oskit.PatchStdout(&output)()
	defer typgo.PatchBash(nil)(t)
	defer oskit.MkdirAll("somepkg")()

	err := app.Setup(cliContext([]string{"-go-mod"}))
	require.EqualError(t, err, "project-pkg is empty")
	require.Equal(t, "Initiate go.mod\n", output.String())
}

func TestSetup_WithNewFlag(t *testing.T) {
	var output strings.Builder
	defer oskit.PatchStdout(&output)()
	defer typgo.PatchBash(nil)(t)

	err := app.Setup(cliContext([]string{
		"-project-pkg=somepkg1",
		"-new",
	}))
	require.NoError(t, err)
	defer os.RemoveAll("somepkg1")

	require.Equal(t, `Create 'somepkg1/cmd/somepkg1/main.go'
Create 'somepkg1/internal/app/start.go'
Create 'somepkg1/internal/generated/ctor/ctor.go'
Create 'somepkg1/tools/typical-build/typical-build.go'
Create 'somepkg1/typicalw'
`, output.String())

	b, _ := ioutil.ReadFile("somepkg1/cmd/somepkg1/main.go")
	require.Equal(t, `package main

// Autogenerated by Typical-Go. DO NOT EDIT.

import (
	"fmt"
	"log"
	"syscall"

	"somepkg1/internal/app"
	_ "somepkg1/internal/generated/ctor"
	"github.com/typical-go/typical-go/pkg/typapp"
	"github.com/typical-go/typical-go/pkg/typgo"
)

func main() {
	fmt.Printf("%s %s\n", typgo.ProjectName, typgo.ProjectVersion)

	application := typapp.Application{
		StartFn:    app.Start,
		ShutdownFn: app.Shutdown,
		ExitSigs:   []syscall.Signal{syscall.SIGTERM, syscall.SIGINT},
	}

	if err := application.Run(); err != nil {
		log.Fatal(err)
	}
}
`, string(b))

	b, _ = ioutil.ReadFile("somepkg1/internal/app/start.go")
	require.Equal(t, `package app

import (
	"bufio"
	"fmt"
	"os"
	"time"
)

// Start app
func Start() {
	// TODO: change start app implementation
	fmt.Println("Hello world!")
	fmt.Print("Press 'Enter' to continue...")
	bufio.NewReader(os.Stdin).ReadBytes('\n')
}

// Shutdown app
func Shutdown() {
	// TODO: change graceful shutdown implementation
	fmt.Printf("Shutdown app at %s", time.Now())
}
`, string(b))

	b, _ = ioutil.ReadFile("somepkg1/tools/typical-build/typical-build.go")
	require.Equal(t, `package main

import (
	"github.com/typical-go/typical-go/pkg/typast"
	"github.com/typical-go/typical-go/pkg/typapp"
	"github.com/typical-go/typical-go/pkg/typgo"
	"github.com/typical-go/typical-go/pkg/typmock"
)

var descriptor = typgo.Descriptor{
	ProjectName:    "somepkg1",
	ProjectVersion: "0.0.1",

	Tasks: []typgo.Tasker{
		// annotate
		&typast.AnnotateMe{
			Sources: []string{"internal"},
			Annotators: []typast.Annotator{
				&typapp.CtorAnnotation{},
			},
		},
		// build
		&typgo.GoBuild{},
		// run
		&typgo.RunBinary{Before: typgo.TaskNames{"annotate", "build"}},
		// mock
		&typmock.GenerateMock{
			Sources: []string{"internal"},
		},
	},
}

func main() {
	typgo.Start(&descriptor)
}
`, string(b))
}
